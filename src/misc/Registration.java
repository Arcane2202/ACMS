/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package misc;

import connection.loginCon;
import java.awt.Font;
import java.math.BigInteger;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;

/**
 *
 * @author anime
 */
public class Registration extends javax.swing.JFrame {

    /**
     * Creates new form Registration
     */
    Connection con=null;
    BigInteger courseid,branchid,batchid;
    String course,branch,batch,coursename ="";
    String Applicant="";
    
    DefaultComboBoxModel dm = new DefaultComboBoxModel();
    public Registration() {
        initComponents();
    }
    
    public Registration(String cache) {
        initComponents();
        setLocationRelativeTo(null);setResizable(false);
        
        Applicant = cache;
        
        try {
            con = DriverManager.getConnection("jdbc:sqlserver://localhost:1433;databaseName=ACMS;selectMethod=cursor", "sa", "123456");
        } catch (SQLException ex) {
            Logger.getLogger(Login.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        loadcombo();
        
        if(Applicant.equals("TEACHER")){
            applicantLabel.setText(Applicant);
            courseLabel.setVisible(false);
            courseComboBox.setVisible(false);
            batchLabel.setVisible(false);
            batchComboBox.setVisible(false);
        }else if(Applicant.equals("STUDENT")){
            applicantLabel.setText(Applicant);
            courseLabel.setVisible(true);
            courseComboBox.setVisible(true);
            batchLabel.setVisible(false);
            batchComboBox.setVisible(false);
            
        }
        
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        logo = new javax.swing.JLabel();
        login = new javax.swing.JLabel();
        applicantLabel = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        courseLabel = new javax.swing.JLabel();
        nameLabel = new javax.swing.JLabel();
        emailLabel = new javax.swing.JLabel();
        mobileLabel = new javax.swing.JLabel();
        passwordLabel = new javax.swing.JLabel();
        cpasswordLabel = new javax.swing.JLabel();
        courseComboBox = new javax.swing.JComboBox<>();
        nameField = new javax.swing.JTextField();
        emailField = new javax.swing.JTextField();
        mobileField = new javax.swing.JTextField();
        signupBtnLabel = new javax.swing.JLabel();
        backBtnLabel = new javax.swing.JLabel();
        passwordField = new javax.swing.JPasswordField();
        cpasswordField = new javax.swing.JPasswordField();
        showpassCheckbox = new javax.swing.JCheckBox();
        branchComboBox = new javax.swing.JComboBox<>();
        branchLabel1 = new javax.swing.JLabel();
        batchLabel = new javax.swing.JLabel();
        batchComboBox = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel5.setBackground(new java.awt.Color(255, 255, 255));
        jPanel5.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        logo.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        logo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/acmsB130px.png"))); // NOI18N
        jPanel5.add(logo, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 20, 400, -1));

        login.setFont(new java.awt.Font("Bahnschrift", 0, 24)); // NOI18N
        login.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        login.setText("REGISTRATION FORM");
        jPanel5.add(login, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 200, 400, -1));

        applicantLabel.setFont(new java.awt.Font("Bahnschrift", 1, 24)); // NOI18N
        applicantLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        applicantLabel.setText("APPLICANT");
        jPanel5.add(applicantLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 160, 390, -1));

        jPanel1.add(jPanel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, 240));

        jPanel2.setBackground(null);

        courseLabel.setFont(new java.awt.Font("Bahnschrift", 1, 12)); // NOI18N
        courseLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        courseLabel.setText("SELECT COURSE:");

        nameLabel.setFont(new java.awt.Font("Bahnschrift", 1, 12)); // NOI18N
        nameLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        nameLabel.setText("YOUR NAME:");

        emailLabel.setFont(new java.awt.Font("Bahnschrift", 1, 12)); // NOI18N
        emailLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        emailLabel.setText("E-MAIL ADDRESS:");

        mobileLabel.setFont(new java.awt.Font("Bahnschrift", 1, 12)); // NOI18N
        mobileLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        mobileLabel.setText("MOBILE NUMBER:");

        passwordLabel.setFont(new java.awt.Font("Bahnschrift", 1, 12)); // NOI18N
        passwordLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        passwordLabel.setText("SET PASSWORD:");

        cpasswordLabel.setFont(new java.awt.Font("Bahnschrift", 1, 12)); // NOI18N
        cpasswordLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        cpasswordLabel.setText("CONFIRM PASSWORD:");

        courseComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "SELECT" }));
        courseComboBox.setBorder(null);
        courseComboBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                courseComboBoxItemStateChanged(evt);
            }
        });
        courseComboBox.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                courseComboBoxMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                courseComboBoxMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                courseComboBoxMouseExited(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                courseComboBoxMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                courseComboBoxMouseReleased(evt);
            }
        });
        courseComboBox.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentHidden(java.awt.event.ComponentEvent evt) {
                courseComboBoxComponentHidden(evt);
            }
        });
        courseComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                courseComboBoxActionPerformed(evt);
            }
        });

        emailField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                emailFieldActionPerformed(evt);
            }
        });

        mobileField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                mobileFieldKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                mobileFieldKeyReleased(evt);
            }
        });

        signupBtnLabel.setFont(new java.awt.Font("Bahnschrift", 0, 14)); // NOI18N
        signupBtnLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        signupBtnLabel.setText("Sign Up");
        signupBtnLabel.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 2, true));
        signupBtnLabel.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        signupBtnLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                signupBtnLabelMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                signupBtnLabelMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                signupBtnLabelMouseExited(evt);
            }
        });

        backBtnLabel.setFont(new java.awt.Font("Bahnschrift", 0, 14)); // NOI18N
        backBtnLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        backBtnLabel.setText("Back");
        backBtnLabel.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 2, true));
        backBtnLabel.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        backBtnLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                backBtnLabelMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                backBtnLabelMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                backBtnLabelMouseExited(evt);
            }
        });

        passwordField.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                passwordFieldMouseClicked(evt);
            }
        });

        cpasswordField.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                cpasswordFieldMouseClicked(evt);
            }
        });
        cpasswordField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cpasswordFieldActionPerformed(evt);
            }
        });

        showpassCheckbox.setBackground(new java.awt.Color(255, 255, 255));
        showpassCheckbox.setFont(new java.awt.Font("Bahnschrift", 0, 12)); // NOI18N
        showpassCheckbox.setText("Show Password");
        showpassCheckbox.setBorder(null);
        showpassCheckbox.setContentAreaFilled(false);
        showpassCheckbox.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        showpassCheckbox.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                showpassCheckboxMouseClicked(evt);
            }
        });

        branchComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "SELECT" }));
        branchComboBox.setBorder(null);

        branchLabel1.setFont(new java.awt.Font("Bahnschrift", 1, 12)); // NOI18N
        branchLabel1.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        branchLabel1.setText("SELECT BRANCH:");

        batchLabel.setFont(new java.awt.Font("Bahnschrift", 1, 12)); // NOI18N
        batchLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        batchLabel.setText("SELECT BATCH:");

        batchComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "SELECT" }));
        batchComboBox.setBorder(null);
        batchComboBox.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                batchComboBoxMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                batchComboBoxMouseEntered(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                batchComboBoxMousePressed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(jPanel2Layout.createSequentialGroup()
                            .addGap(41, 41, 41)
                            .addComponent(backBtnLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(signupBtnLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel2Layout.createSequentialGroup()
                            .addContainerGap()
                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(nameLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(emailLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(mobileLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(passwordLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(cpasswordLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGap(18, 18, 18)
                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(showpassCheckbox)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(nameField, javax.swing.GroupLayout.DEFAULT_SIZE, 210, Short.MAX_VALUE)
                                    .addComponent(emailField)
                                    .addComponent(mobileField)
                                    .addComponent(passwordField)
                                    .addComponent(cpasswordField)))))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(courseLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(courseComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(branchLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(branchComboBox, 0, 210, Short.MAX_VALUE))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(batchLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(batchComboBox, 0, 210, Short.MAX_VALUE)))))
                .addContainerGap(30, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(courseLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(courseComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(branchComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(branchLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(batchComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(batchLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(nameField)
                    .addComponent(nameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(emailLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(emailField, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(mobileField)
                    .addComponent(mobileLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(passwordField)
                    .addComponent(passwordLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(cpasswordLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(cpasswordField, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(showpassCheckbox)
                .addGap(15, 15, 15)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(signupBtnLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(backBtnLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        jPanel1.add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 250, 400, 480));

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, -2, 400, 800));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void signupBtnLabelMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_signupBtnLabelMouseEntered
        // TODO add your handling code here:
        signupBtnLabel.setFont(signupBtnLabel.getFont().deriveFont(Font.BOLD, 15f));
    }//GEN-LAST:event_signupBtnLabelMouseEntered

    private void signupBtnLabelMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_signupBtnLabelMouseExited
        // TODO add your handling code here:
        signupBtnLabel.setFont(signupBtnLabel.getFont().deriveFont(~Font.BOLD, 14f));
    }//GEN-LAST:event_signupBtnLabelMouseExited

    private void backBtnLabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_backBtnLabelMouseClicked
        // TODO add your handling code here:
        dispose();
        new Login(Applicant).setVisible(true);
    }//GEN-LAST:event_backBtnLabelMouseClicked

    private void backBtnLabelMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_backBtnLabelMouseEntered
        // TODO add your handling code here:
        backBtnLabel.setFont(backBtnLabel.getFont().deriveFont(Font.BOLD, 15f));
    }//GEN-LAST:event_backBtnLabelMouseEntered

    private void backBtnLabelMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_backBtnLabelMouseExited
        // TODO add your handling code here:
        backBtnLabel.setFont(backBtnLabel.getFont().deriveFont(~Font.BOLD, 14f));
    }//GEN-LAST:event_backBtnLabelMouseExited

    private void showpassCheckboxMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_showpassCheckboxMouseClicked
        // TODO add your handling code here:
        
        if(showpassCheckbox.isSelected()){
            passwordField.setEchoChar((char) 0);
            cpasswordField.setEchoChar((char) 0);
        }else{
            passwordField.setEchoChar('*');
            cpasswordField.setEchoChar('*');
        }
    }//GEN-LAST:event_showpassCheckboxMouseClicked

    private void emailFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_emailFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_emailFieldActionPerformed

    private void cpasswordFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cpasswordFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cpasswordFieldActionPerformed

    private void passwordFieldMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_passwordFieldMouseClicked
        // TODO add your handling code here:
        if(showpassCheckbox.isSelected()){
            passwordField.setEchoChar((char) 0);
            cpasswordField.setEchoChar((char) 0);
        }else{
            passwordField.setEchoChar('*');
            cpasswordField.setEchoChar('*');
        }
    }//GEN-LAST:event_passwordFieldMouseClicked

    private void cpasswordFieldMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cpasswordFieldMouseClicked
        // TODO add your handling code here:
        if(showpassCheckbox.isSelected()){
            passwordField.setEchoChar((char) 0);
            cpasswordField.setEchoChar((char) 0);
        }else{
            passwordField.setEchoChar('*');
            cpasswordField.setEchoChar('*');
        }
    }//GEN-LAST:event_cpasswordFieldMouseClicked

    private void mobileFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_mobileFieldKeyReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_mobileFieldKeyReleased

    private void mobileFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_mobileFieldKeyPressed
        // TODO add your handling code here:
        char c = evt.getKeyChar();
        if(Character.isLetter(c)){
            //useridField.setEditable(false);
            JOptionPane.showMessageDialog(null, "Only Numbers are allowed!");
            
           String string = mobileField.getText();  
            //creating a constructor of StringBuffer class  
            StringBuffer sb= new StringBuffer(string);  
            //invoking the method  
            sb.deleteCharAt(sb.length()-1);
            mobileField.setText(sb.toString());
        }
    }//GEN-LAST:event_mobileFieldKeyPressed

    private void signupBtnLabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_signupBtnLabelMouseClicked
        // TODO add your handling code here:
        course = courseComboBox.getSelectedItem().toString();
        branch = branchComboBox.getSelectedItem().toString();
        batch  = batchComboBox.getSelectedItem().toString();
        String name   = nameField.getText();
        String email  = emailField.getText();
        String mobile = mobileField.getText();
        String pass   = String.valueOf(passwordField.getPassword());
        String cpass  = String.valueOf(cpasswordField.getPassword());
        float temp;
        try {
            temp = Float.parseFloat(mobileField.getText());
        } catch (NumberFormatException e) {
            JOptionPane.showConfirmDialog(null, "Invalid input in mobile number field!", "Error", JOptionPane.CANCEL_OPTION);
        }
        
         EmailValidator emailValidator = new EmailValidator();
        if(!emailValidator.validate(emailField.getText().trim())) {
        System.out.print("Invalid Email ID");
        JOptionPane.showConfirmDialog(null, "Invalid format of Email Address!", "Error", JOptionPane.CANCEL_OPTION);
        }
        
        
        if(Applicant.equals("STUDENT")){
            if(course.equals("SELECT")){
                JOptionPane.showConfirmDialog(null, "Select your course!", "Error", JOptionPane.CANCEL_OPTION);
            }else if(branch.equals("SELECT")){
                JOptionPane.showConfirmDialog(null, "Select your branch!", "Error", JOptionPane.CANCEL_OPTION);
            }else if(name.equals("")){
                JOptionPane.showConfirmDialog(null, "Name field is Empty!", "Error", JOptionPane.CANCEL_OPTION);
            }else if(pass.equals("")){
                JOptionPane.showConfirmDialog(null, "Password field is Empty!", "Error", JOptionPane.CANCEL_OPTION);
            }else if(!pass.equals(cpass)){
                JOptionPane.showConfirmDialog(null, "Your password field does not match!", "Error", JOptionPane.CANCEL_OPTION);
            }else{
                try {
                    DateTimeFormatter dtf = DateTimeFormatter.ofPattern("dd-MM-yyyy");
                    LocalDateTime now = LocalDateTime.now();
                    
                    
                    
                    String date = dtf.toString();
                    
                    fetchCourse();
                    fetchBatch();
                    fetchBranch();
                    
                    System.out.println(dtf.format(now));
                    System.out.println(course + courseid);
                    System.out.println(batch + batchid);
                    System.out.println(branch + branchid);
                    
                    String QUERY = "INSERT INTO STUDENTS VALUES('" + name + "','" + mobile + "','" + email + "','" + dtf.format(now) + "'," + courseid + ",'" + batchid + "','" + branchid + "','" + pass + "','UNREGISTERED')";
                    
                    Statement statement = con.createStatement();
                    statement.executeUpdate(QUERY);
                    
                    JOptionPane.showMessageDialog(null, "Sign up successful!");
                    //new Options(PetID,PetName,Value).setVisible(true);
                    dispose();
                    new Login(Applicant).setVisible(true);
                } catch (SQLException ex) {
                    Logger.getLogger(Registration.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            
            
            
        }else if(Applicant.equals("TEACHER")){
            if(branch.equals("SELECT")){
                JOptionPane.showConfirmDialog(null, "Select your branch!", "Error", JOptionPane.CANCEL_OPTION);
            }else if(name.equals("")){
                JOptionPane.showConfirmDialog(null, "Name field is Empty!", "Error", JOptionPane.CANCEL_OPTION);
            }else if(pass.equals("")){
                JOptionPane.showConfirmDialog(null, "Password field is Empty!", "Error", JOptionPane.CANCEL_OPTION);
            }else if(!pass.equals(cpass)){
                JOptionPane.showConfirmDialog(null, "Your password field does not match!", "Error", JOptionPane.CANCEL_OPTION);
            }else{
                try {
                    fetchBranch();
                    DateTimeFormatter dtf = DateTimeFormatter.ofPattern("dd-MM-yyyy");
                    LocalDateTime now = LocalDateTime.now();
                    
                    System.out.println(branch + branchid);
                    System.out.println(dtf.format(now));
                    String QUERY = "INSERT INTO TEACHERS VALUES('" + name + "','" + email + "','" + mobile + "','25000','" + dtf.format(now) + "','" + branchid + "','" + pass + "','UNREGISTERED')";
                    
                    Statement statement = con.createStatement();
                    statement.executeUpdate(QUERY);
                    
                    JOptionPane.showMessageDialog(null, "Sign up successful!");
                    //new Options(PetID,PetName,Value).setVisible(true);
                    dispose();
                    new Login(Applicant).setVisible(true);
                } catch (SQLException ex) {
                    Logger.getLogger(Registration.class.getName()).log(Level.SEVERE, null, ex);
                }
                
            }
        } 
        
        
        
    }//GEN-LAST:event_signupBtnLabelMouseClicked

    private void courseComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_courseComboBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_courseComboBoxActionPerformed

    private void courseComboBoxMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_courseComboBoxMouseExited
        // TODO add your handling code here: 
    }//GEN-LAST:event_courseComboBoxMouseExited

    private void courseComboBoxMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_courseComboBoxMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_courseComboBoxMouseClicked

    private void courseComboBoxMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_courseComboBoxMouseEntered
        // TODO add your handling code here:
        
    }//GEN-LAST:event_courseComboBoxMouseEntered

    private void courseComboBoxMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_courseComboBoxMousePressed
        // TODO add your handling code here:
    }//GEN-LAST:event_courseComboBoxMousePressed

    private void courseComboBoxMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_courseComboBoxMouseReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_courseComboBoxMouseReleased

    private void batchComboBoxMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_batchComboBoxMouseClicked
        // TODO add your handling code here:
        
    }//GEN-LAST:event_batchComboBoxMouseClicked

    private void batchComboBoxMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_batchComboBoxMouseEntered
        // TODO add your handling code here:
        
    }//GEN-LAST:event_batchComboBoxMouseEntered

    private void batchComboBoxMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_batchComboBoxMousePressed
        // TODO add your handling code here:
    }//GEN-LAST:event_batchComboBoxMousePressed

    private void courseComboBoxComponentHidden(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_courseComboBoxComponentHidden
        // TODO add your handling code here:
    }//GEN-LAST:event_courseComboBoxComponentHidden

    private void courseComboBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_courseComboBoxItemStateChanged
        // TODO add your handling code here:
        if(Applicant.equals("STUDENT") && courseComboBox.getSelectedItem().toString().equals("SELECT")){
            batchLabel.setVisible(false);
            batchComboBox.setVisible(false);
        }else if(Applicant.equals("STUDENT") && courseComboBox.getSelectedItem().toString()!="SELECT"){
            batchLabel.setVisible(true);
            batchComboBox.setVisible(true);
            dm = new DefaultComboBoxModel();
            dm.addElement("SELECT");
            batchComboBox.setModel(dm);
            dm.setSelectedItem("SELECT");
            coursename = courseComboBox.getSelectedItem().toString();
            setBatchComboBox();
        }
    }//GEN-LAST:event_courseComboBoxItemStateChanged

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Registration.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Registration.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Registration.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Registration.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Registration().setVisible(true);
            }
        });
    }
    
    
    
    void loadcombo() {
    try
    {
    // Your database connections 
    Statement st = con.createStatement();
    ResultSet rs= st.executeQuery("select course_name from COURSES");
    while(rs.next()){                            
        courseComboBox.addItem(rs.getString(1));
    }
    //con.close();
    }
    catch(Exception e)
    {
        System.out.println("Error"+e);
    }  
    
    try
    {
    // Your database connections 
    Statement st = con.createStatement();
    ResultSet rs= st.executeQuery("select branch_name from BRANCHES");
    while(rs.next()){                            
        branchComboBox.addItem(rs.getString(1));
    }
    //con.close();
    }
    catch(Exception e)
    {
        System.out.println("Error"+e);
    } 
}

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel applicantLabel;
    private javax.swing.JLabel backBtnLabel;
    private javax.swing.JComboBox<String> batchComboBox;
    private javax.swing.JLabel batchLabel;
    private javax.swing.JComboBox<String> branchComboBox;
    private javax.swing.JLabel branchLabel1;
    private javax.swing.JComboBox<String> courseComboBox;
    private javax.swing.JLabel courseLabel;
    private javax.swing.JPasswordField cpasswordField;
    private javax.swing.JLabel cpasswordLabel;
    private javax.swing.JTextField emailField;
    private javax.swing.JLabel emailLabel;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JLabel login;
    private javax.swing.JLabel logo;
    private javax.swing.JTextField mobileField;
    private javax.swing.JLabel mobileLabel;
    private javax.swing.JTextField nameField;
    private javax.swing.JLabel nameLabel;
    private javax.swing.JPasswordField passwordField;
    private javax.swing.JLabel passwordLabel;
    private javax.swing.JCheckBox showpassCheckbox;
    private javax.swing.JLabel signupBtnLabel;
    // End of variables declaration//GEN-END:variables

    private void fetchCourse() {        
        try {
            Statement statement = con.createStatement();
            String sql = "SELECT * FROM COURSES WHERE course_name='"+course+"'";
            
            ResultSet resultset = statement.executeQuery(sql);
            
            while(resultset.next()){
                String tcourseID = resultset.getString("course_id");
                String tcoursename  = resultset.getString("course_name");
                
                
                if(course.equals(tcoursename))
                {
                    BigInteger temp = new BigInteger(tcourseID);
                    courseid = temp;
                }
                    
                    
                }
        } catch (SQLException ex) {
            Logger.getLogger(Registration.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void setBatchComboBox() {
        try
        {
            // Your database connections 
            Statement st = con.createStatement();
            ResultSet rs= st.executeQuery("SELECT batch_name FROM BATCHS INNER JOIN COURSES ON BATCHS.course_id=COURSES.course_id WHERE COURSES.course_name='"+coursename+"';");
            while(rs.next()){                            
                batchComboBox.addItem(rs.getString(1));
            }
            //con.close();
        }
        catch(SQLException e)
        {
            System.out.println("Error"+e);
        }
    }

    private void fetchBatch() {
        try {
            Statement statement = con.createStatement();
            String sql = "SELECT * FROM BATCHS WHERE batch_name='"+batch+"'";
            
            ResultSet resultset = statement.executeQuery(sql);
            
            while(resultset.next()){
                String tbatchID = resultset.getString("batch_id");
                String tbatchname  = resultset.getString("batch_name");
                
                
                if(batch.equals(tbatchname))
                {
                    BigInteger temp = new BigInteger(tbatchID);
                    batchid = temp;
                }
                    
                    
                }
        } catch (SQLException ex) {
            Logger.getLogger(Registration.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }

    private void fetchBranch() {
        try {
            Statement statement = con.createStatement();
            String sql = "SELECT * FROM BRANCHES WHERE branch_name='"+branch+"'";
            
            ResultSet resultset = statement.executeQuery(sql);
            
            while(resultset.next()){
                String tbranchID = resultset.getString("branch_id");
                String tbranchname  = resultset.getString("branch_name");
                
                
                if(branch.equals(tbranchname))
                {
                    BigInteger temp = new BigInteger(tbranchID);
                    branchid = temp;
                }
                    
                    
                }
        } catch (SQLException ex) {
            Logger.getLogger(Registration.class.getName()).log(Level.SEVERE, null, ex);
        }
    
    }
}
