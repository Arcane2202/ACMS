/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package merge;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.sql.Time;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.time.LocalTime;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.RowFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;
import net.proteanit.sql.DbUtils;

/**
 *
 * @author Arcane
 */
public class ExamM extends javax.swing.JFrame {

    int rowIndx = -1;
    DefaultTableModel mod,model;
    Connection con;
    String task = "Edit";

    /**
     * Creates new form ExamM
     */
    public ExamM() {
        initComponents();
        setLocationRelativeTo(null);
        setResizable(false);
        setLocationRelativeTo(null);
        setResizable(false);

        try {
            con = DriverManager.getConnection("jdbc:sqlserver://localhost:1433;databaseName=ACMS;selectMethod=cursor", "sa", "123456");
        } catch (SQLException ex) {
            Logger.getLogger(CourseM.class.getName()).log(Level.SEVERE, null, ex);
        }

        populateTable();
        examType.addItem("CT");
        examType.addItem("WEEKLY");
        examType.addItem("MONTHLY");
        examType.addItem("FINAL");
        populateSubjects();

        //populateBatch();
        //populateDistrict();
        saveExam.setVisible(false);
        cancelExam.setVisible(false);
        examDate.setEnabled(false);
        examType.setEnabled(false);
        examSid.setEnabled(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jPanel16 = new javax.swing.JPanel();
        jTabbedPane2 = new javax.swing.JTabbedPane();
        idLab = new javax.swing.JPanel();
        cancelExam = new javax.swing.JButton();
        examDuration = new javax.swing.JTextField();
        examId = new javax.swing.JTextField();
        idlab = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        editExam = new javax.swing.JButton();
        saveExam = new javax.swing.JButton();
        returnExam = new javax.swing.JButton();
        examType = new javax.swing.JComboBox<>();
        examDate = new com.toedter.calendar.JDateChooser();
        jLabel5 = new javax.swing.JLabel();
        examMarks = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        examSid = new javax.swing.JComboBox<>();
        jLabel7 = new javax.swing.JLabel();
        examTime = new javax.swing.JTextField();
        addExam = new javax.swing.JButton();
        jPanel15 = new javax.swing.JPanel();
        title = new javax.swing.JLabel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel6 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        examTable = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setMinimumSize(new java.awt.Dimension(1374, 792));
        jPanel1.setName(""); // NOI18N
        jPanel1.setOpaque(false);
        jPanel1.setPreferredSize(new java.awt.Dimension(1374, 792));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel2.setBackground(new java.awt.Color(0, 153, 255));
        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel16.setBackground(new java.awt.Color(0, 153, 255));

        javax.swing.GroupLayout jPanel16Layout = new javax.swing.GroupLayout(jPanel16);
        jPanel16.setLayout(jPanel16Layout);
        jPanel16Layout.setHorizontalGroup(
            jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 350, Short.MAX_VALUE)
        );
        jPanel16Layout.setVerticalGroup(
            jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 50, Short.MAX_VALUE)
        );

        jPanel2.add(jPanel16, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 350, 50));

        jTabbedPane2.setBackground(new java.awt.Color(0, 153, 255));
        jTabbedPane2.setTabLayoutPolicy(javax.swing.JTabbedPane.SCROLL_TAB_LAYOUT);

        idLab.setBackground(new java.awt.Color(0, 153, 255));

        cancelExam.setBackground(new java.awt.Color(0, 168, 247));
        cancelExam.setFont(new java.awt.Font("Bahnschrift", 0, 20)); // NOI18N
        cancelExam.setText("Cancel");
        cancelExam.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        cancelExam.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        cancelExam.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelExamActionPerformed(evt);
            }
        });

        examDuration.setFont(new java.awt.Font("Bahnschrift", 0, 20)); // NOI18N

        examId.setFont(new java.awt.Font("Bahnschrift", 0, 20)); // NOI18N
        examId.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                examIdActionPerformed(evt);
            }
        });

        idlab.setFont(new java.awt.Font("Bahnschrift", 0, 20)); // NOI18N
        idlab.setText("ID                 :");

        jLabel2.setFont(new java.awt.Font("Bahnschrift", 0, 20)); // NOI18N
        jLabel2.setText("Type             :");

        jLabel3.setFont(new java.awt.Font("Bahnschrift", 0, 20)); // NOI18N
        jLabel3.setText("Date             :");

        jLabel4.setFont(new java.awt.Font("Bahnschrift", 0, 20)); // NOI18N
        jLabel4.setText("Duration       :");

        editExam.setBackground(new java.awt.Color(0, 168, 247));
        editExam.setFont(new java.awt.Font("Bahnschrift", 0, 20)); // NOI18N
        editExam.setText("Edit");
        editExam.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        editExam.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        editExam.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editExamActionPerformed(evt);
            }
        });

        saveExam.setBackground(new java.awt.Color(0, 168, 247));
        saveExam.setFont(new java.awt.Font("Bahnschrift", 0, 20)); // NOI18N
        saveExam.setText("Save");
        saveExam.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        saveExam.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        saveExam.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveExamActionPerformed(evt);
            }
        });

        returnExam.setBackground(new java.awt.Color(0, 168, 247));
        returnExam.setFont(new java.awt.Font("Bahnschrift", 0, 20)); // NOI18N
        returnExam.setText("Return");
        returnExam.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        returnExam.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        returnExam.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                returnExamActionPerformed(evt);
            }
        });

        examType.setFont(new java.awt.Font("Bahnschrift", 0, 20)); // NOI18N

        examDate.setDateFormatString("dd-MM-yyyy");
        examDate.setFont(new java.awt.Font("Bahnschrift", 0, 20)); // NOI18N

        jLabel5.setFont(new java.awt.Font("Bahnschrift", 0, 20)); // NOI18N
        jLabel5.setText("Total Marks  :");

        examMarks.setFont(new java.awt.Font("Bahnschrift", 0, 20)); // NOI18N

        jLabel6.setFont(new java.awt.Font("Bahnschrift", 0, 20)); // NOI18N
        jLabel6.setText("Subject ID     :");

        examSid.setFont(new java.awt.Font("Bahnschrift", 0, 20)); // NOI18N

        jLabel7.setFont(new java.awt.Font("Bahnschrift", 0, 20)); // NOI18N
        jLabel7.setText("Time              :");

        examTime.setEditable(false);
        examTime.setFont(new java.awt.Font("Bahnschrift", 0, 20)); // NOI18N

        addExam.setBackground(new java.awt.Color(0, 168, 247));
        addExam.setFont(new java.awt.Font("Bahnschrift", 0, 20)); // NOI18N
        addExam.setText("Add");
        addExam.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        addExam.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        addExam.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addExamActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout idLabLayout = new javax.swing.GroupLayout(idLab);
        idLab.setLayout(idLabLayout);
        idLabLayout.setHorizontalGroup(
            idLabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(idLabLayout.createSequentialGroup()
                .addGap(47, 47, 47)
                .addGroup(idLabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(idLabLayout.createSequentialGroup()
                        .addComponent(cancelExam, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(saveExam, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(idLabLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(returnExam, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(97, 97, 97))
                    .addGroup(idLabLayout.createSequentialGroup()
                        .addComponent(addExam, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(editExam, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(53, 53, 53))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, idLabLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(idLabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(idLabLayout.createSequentialGroup()
                        .addGap(1, 1, 1)
                        .addGroup(idLabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(176, 176, 176))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, idLabLayout.createSequentialGroup()
                        .addGroup(idLabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, idLabLayout.createSequentialGroup()
                                .addComponent(jLabel7)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(examTime))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, idLabLayout.createSequentialGroup()
                                .addComponent(jLabel6)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(examSid, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, idLabLayout.createSequentialGroup()
                                .addGroup(idLabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(idlab, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(idLabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(idLabLayout.createSequentialGroup()
                                        .addGap(18, 18, 18)
                                        .addGroup(idLabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(examType, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(examDate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(examMarks)
                                            .addComponent(examDuration, javax.swing.GroupLayout.DEFAULT_SIZE, 186, Short.MAX_VALUE)))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, idLabLayout.createSequentialGroup()
                                        .addGap(17, 17, 17)
                                        .addComponent(examId, javax.swing.GroupLayout.PREFERRED_SIZE, 187, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                        .addGap(0, 11, Short.MAX_VALUE)))
                .addGap(27, 27, 27))
        );
        idLabLayout.setVerticalGroup(
            idLabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, idLabLayout.createSequentialGroup()
                .addGap(99, 99, 99)
                .addGroup(idLabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(idlab, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(examId, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(21, 21, 21)
                .addGroup(idLabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(examType, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(idLabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(examDate, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(idLabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(examDuration, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(idLabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(examMarks, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(idLabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(examSid, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(idLabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(examTime, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 89, Short.MAX_VALUE)
                .addGroup(idLabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(saveExam)
                    .addComponent(cancelExam))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(idLabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(editExam)
                    .addComponent(addExam))
                .addGap(36, 36, 36)
                .addComponent(returnExam)
                .addGap(45, 45, 45))
        );

        jTabbedPane2.addTab("tab3", idLab);

        jPanel2.add(jTabbedPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, -4, 360, 800));

        jPanel1.add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 350, 800));

        jPanel15.setBackground(new java.awt.Color(0, 168, 247));

        title.setFont(new java.awt.Font("Bahnschrift", 1, 24)); // NOI18N
        title.setForeground(new java.awt.Color(255, 255, 255));
        title.setText("Exam Management");

        javax.swing.GroupLayout jPanel15Layout = new javax.swing.GroupLayout(jPanel15);
        jPanel15.setLayout(jPanel15Layout);
        jPanel15Layout.setHorizontalGroup(
            jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel15Layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addComponent(title, javax.swing.GroupLayout.PREFERRED_SIZE, 365, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(641, Short.MAX_VALUE))
        );
        jPanel15Layout.setVerticalGroup(
            jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel15Layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addComponent(title)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel1.add(jPanel15, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 70, 1030, 50));

        jTabbedPane1.setBackground(new java.awt.Color(255, 255, 255));
        jTabbedPane1.setTabLayoutPolicy(javax.swing.JTabbedPane.SCROLL_TAB_LAYOUT);

        jPanel6.setBackground(new java.awt.Color(255, 255, 255));
        jPanel6.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));

        jScrollPane3.setBackground(new java.awt.Color(255, 255, 255));
        jScrollPane3.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));

        examTable.setAutoCreateRowSorter(true);
        examTable.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        examTable.setFont(new java.awt.Font("Bahnschrift", 0, 18)); // NOI18N
        examTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        examTable.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        examTable.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        examTable.setGridColor(new java.awt.Color(255, 255, 255));
        examTable.setRowHeight(70);
        examTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                examTableMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(examTable);

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 996, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(918, 918, 918))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 508, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(141, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("tab4", jPanel6);

        jPanel1.add(jTabbedPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 90, 1010, 700));

        jLabel1.setFont(new java.awt.Font("Bahnschrift", 0, 20)); // NOI18N
        jLabel1.setText("Search:");
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(1030, 10, 100, 50));

        jTextField1.setFont(new java.awt.Font("Bahnschrift", 0, 20)); // NOI18N
        jTextField1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTextField1KeyReleased(evt);
            }
        });
        jPanel1.add(jTextField1, new org.netbeans.lib.awtextra.AbsoluteConstraints(1140, 10, 190, 50));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cancelExamActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelExamActionPerformed
        // TODO add your handling code here:
        //jTabbedPane1.setSelectedIndex(1);
        //populateProfile();
        editExam.setVisible(true);
        addExam.setVisible(true);
        returnExam.setVisible(true);
        saveExam.setVisible(false);
        cancelExam.setVisible(false);
        examId.setText("");
        examType.setSelectedIndex(0);
        examSid.setSelectedIndex(0);
        Date date;
        try {
            date = new SimpleDateFormat("dd-MM-yyyy").parse("01-01-2000");
            examDate.setDate(date);
        } catch (ParseException ex) {
            Logger.getLogger(ExamM.class.getName()).log(Level.SEVERE, null, ex);
        }
        examDuration.setText("");
        examMarks.setText("");
        examId.setVisible(true);
        idlab.setVisible(true);
        examType.setEditable(false);
        examDuration.setEditable(false);
        examMarks.setEditable(false);
        examSid.setEnabled(false);
        examDate.setEnabled(false);
        examTime.setEditable(false);
    }//GEN-LAST:event_cancelExamActionPerformed

    private void examIdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_examIdActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_examIdActionPerformed

    private void editExamActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editExamActionPerformed
        // TODO add your handling code here:
        task = "Edit";
        editExam.setVisible(false);
        addExam.setVisible(false);
        returnExam.setVisible(false);
        saveExam.setVisible(true);
        cancelExam.setVisible(true);
        examId.setVisible(false);
        idlab.setVisible(false);

        examDuration.setEditable(true);
        examMarks.setEditable(true);
        examType.setEnabled(true);
        examTime.setEditable(true);
        examSid.setEnabled(true);
        examDate.setEnabled(true);
    }//GEN-LAST:event_editExamActionPerformed

    private void saveExamActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveExamActionPerformed
        // TODO add your handling code here:
        String id = examId.getText();
        String type = examType.getSelectedItem().toString();
        SimpleDateFormat dateFormat = new SimpleDateFormat("dd-MM-yyyy");
        String date = dateFormat.format(examDate.getDate());
        String dur = examDuration.getText();
        String marks = examMarks.getText();
        String sid = examSid.getSelectedItem().toString();
        String time = examTime.getText();

        if (task.equals("Edit")) {
            try {
                String quer = "UPDATE EXAMS set exam_type=?,exam_date=?,exam_duration=?,exam_total_marks=?,subject_id=?,exam_time=? WHERE exam_id=?";
                PreparedStatement statement = con.prepareStatement(quer);
                statement.setString(1, type);
                statement.setString(2, date);
                statement.setString(3, dur);
                statement.setString(4, marks);
                statement.setString(5, sid);
                statement.setString(6, time);
                statement.setString(7, id);
                statement.executeUpdate();
                populateTable();
                JOptionPane.showMessageDialog(this, "Successfully Updated");
                editExam.setVisible(true);
                addExam.setVisible(true);
                returnExam.setVisible(true);
                saveExam.setVisible(false);
                cancelExam.setVisible(false);
                examId.setText("");
                examType.setSelectedIndex(0);
                examSid.setSelectedIndex(0);
                Date dates;
                dates = new SimpleDateFormat("dd-MM-yyyy").parse("01-01-2000");
                examDate.setDate(dates);
                examDuration.setText("");
                examMarks.setText("");
                examId.setVisible(true);
                idlab.setVisible(true);
                examType.setEditable(false);
                examDuration.setEditable(false);
                examMarks.setEditable(false);
                examSid.setEnabled(false);
                examTime.setEditable(false);
                examDate.setEnabled(false);
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(this, ex);
            } catch (ParseException ex) {
                Logger.getLogger(ExamM.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {

            try {
                String quer = "INSERT INTO EXAMS VALUES(?,?,?,?,?,?)";
                PreparedStatement statement = con.prepareStatement(quer);
                statement.setString(1, type);
                statement.setString(2, date);
                statement.setString(3, dur);
                statement.setString(4, marks);
                statement.setString(5, sid);
                statement.setString(6, time);
                statement.executeUpdate();
                populateTable();
                JOptionPane.showMessageDialog(this, "Successfully Added");
                                editExam.setVisible(true);
                addExam.setVisible(true);
                returnExam.setVisible(true);
                saveExam.setVisible(false);
                cancelExam.setVisible(false);
                examId.setText("");
                examType.setSelectedIndex(0);
                examSid.setSelectedIndex(0);
                Date dates;
                dates = new SimpleDateFormat("dd-MM-yyyy").parse("01-01-2000");
                examDate.setDate(dates);
                examDuration.setText("");
                examMarks.setText("");
                examId.setVisible(true);
                idlab.setVisible(true);
                examType.setEditable(false);
                examDuration.setEditable(false);
                examMarks.setEditable(false);
                examSid.setEnabled(false);
                examTime.setEditable(false);
                examDate.setEnabled(false);
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(this, ex);
            } catch (ParseException ex) {
                Logger.getLogger(ExamM.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_saveExamActionPerformed

    private void returnExamActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_returnExamActionPerformed
        // TODO add your handling code here:
        adminLayout obj = new adminLayout();
        obj.setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_returnExamActionPerformed

    private void examTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_examTableMouseClicked
        // TODO add your handling code here:
        mod = (DefaultTableModel) examTable.getModel();
        rowIndx = examTable.getSelectedRow();
        examId.setText(mod.getValueAt(rowIndx, 0).toString());
        String typeSelect = mod.getValueAt(rowIndx, 1).toString();
        for (int i = 0; i < examType.getItemCount(); i++) {
            if (examType.getItemAt(i).toString().equals(typeSelect)) {
                examType.setSelectedIndex(i);
                break;
            }
        }
        Date date;
        try {
            date = new SimpleDateFormat("dd-MM-yyyy").parse(mod.getValueAt(rowIndx, 2).toString());
            examDate.setDate(date);
        } catch (ParseException ex) {
            Logger.getLogger(ExamM.class.getName()).log(Level.SEVERE, null, ex);
        }
        examDuration.setText(mod.getValueAt(rowIndx, 3).toString());
        examMarks.setText(mod.getValueAt(rowIndx, 4).toString());
        String subSelect = mod.getValueAt(rowIndx, 5).toString();
        for (int i = 0; i < examSid.getItemCount(); i++) {
            if (examSid.getItemAt(i).toString().equals(subSelect)) {
                examSid.setSelectedIndex(i);
                break;
            }
        }
        examTime.setText(mod.getValueAt(rowIndx, 6).toString());
    }//GEN-LAST:event_examTableMouseClicked

    private void addExamActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addExamActionPerformed
        // TODO add your handling code here:
        task = "Add";
        editExam.setVisible(false);
        addExam.setVisible(false);
        returnExam.setVisible(false);
        saveExam.setVisible(true);
        cancelExam.setVisible(true);
        examId.setVisible(false);
        idlab.setVisible(false);

        examDuration.setEditable(true);
        examMarks.setEditable(true);
        examType.setEnabled(true);
        examTime.setEditable(true);
        examSid.setEnabled(true);
        examDate.setEnabled(true);
        
        examId.setText("");
        examType.setSelectedIndex(0);
        examSid.setSelectedIndex(0);
        Date date;
        try {
            date = new SimpleDateFormat("dd-MM-yyyy").parse("01-01-2000");
            examDate.setDate(date);
        } catch (ParseException ex) {
            Logger.getLogger(ExamM.class.getName()).log(Level.SEVERE, null, ex);
        }
        examDuration.setText("");
        examMarks.setText("");
    }//GEN-LAST:event_addExamActionPerformed

    private void jTextField1KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField1KeyReleased
        // TODO add your handling code here:
        String s = jTextField1.getText();
        searchRecordApprove(s);
    }//GEN-LAST:event_jTextField1KeyReleased

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ExamM.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ExamM.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ExamM.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ExamM.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ExamM().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addExam;
    private javax.swing.JButton cancelExam;
    private javax.swing.JButton editExam;
    private com.toedter.calendar.JDateChooser examDate;
    private javax.swing.JTextField examDuration;
    private javax.swing.JTextField examId;
    private javax.swing.JTextField examMarks;
    private javax.swing.JComboBox<String> examSid;
    private javax.swing.JTable examTable;
    private javax.swing.JTextField examTime;
    private javax.swing.JComboBox<String> examType;
    private javax.swing.JPanel idLab;
    private javax.swing.JLabel idlab;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel15;
    private javax.swing.JPanel jPanel16;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTabbedPane jTabbedPane2;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JButton returnExam;
    private javax.swing.JButton saveExam;
    private javax.swing.JLabel title;
    // End of variables declaration//GEN-END:variables

    public void populateTable() {
        try {
            String quer = "SELECT exam_id,exam_type,exam_date,exam_duration,exam_total_marks,subject_id,exam_time FROM EXAMS";
            ResultSet resultSet;
            PreparedStatement statement = con.prepareStatement(quer);
            resultSet = statement.executeQuery();
            examTable.setModel(DbUtils.resultSetToTableModel(resultSet));
            searchRecordApprove("");
        } catch (SQLException ex) {
            Logger.getLogger(studentLayout.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void populateSubjects() {
        try {
            // Your database connections 
            Statement st = con.createStatement();
            ResultSet rs = st.executeQuery("SELECT * FROM SUBJECTS");
            while (rs.next()) {
                examSid.addItem(rs.getString(1));
            }
            //con.close();
        } catch (SQLException e) {
            System.out.println("Error" + e);
        }
    }
    public void searchRecordApprove(String str){
        model = (DefaultTableModel) examTable.getModel();
        TableRowSorter<DefaultTableModel> trs = new TableRowSorter<>(model);
        examTable.setRowSorter(trs);
        trs.setRowFilter(RowFilter.regexFilter("(?i)" + str));

    }
}
